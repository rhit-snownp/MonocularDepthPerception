%Trains the coarse network independently
clc; close all; clear variables; 
%%
[trainCombined, valCombined] = ReadDIODEToDatastore("images\train\indoors\");
%%
lgraph = pipeline2();
inputSize = lgraph.Layers(1).InputSize;
coarseGraph = lgraph.Layers(1:17);
%add a regression layer so we can calculate loss
layers = [ coarseGraph
          SIERegressionLayer("SIE")];
%%
options = trainingOptions("adam", ...
    'MiniBatchSize',32, ...
    'MaxEpochs',4, ...
    'InitialLearnRate',1e-3, ...
    'Shuffle','every-epoch', ...
    'ValidationData', valCombined, ...
    'ValidationFrequency',50, ...
    'Verbose', false, ...
    'Plots','training-progress');

net = trainNetwork(trainCombined,layers,options);
%%
%lower the learning rate after the first time through
options = trainingOptions("adam", ...
    'MiniBatchSize',32, ...
    'MaxEpochs',4, ...
    'InitialLearnRate',1e-4, ...
    'Shuffle','every-epoch', ...
    'ValidationData', valCombined, ...
    'ValidationFrequency',50, ...
    'Verbose', false, ...
    'Plots','training-progress');

% using a for loop because I'm not sure if the data augmentation only runs
% when you load the images or each time the image is accessed--either way
% this will get more randomized data
for i=1:3
    [trainCombined, valCombined] = ReadDIODEToDatastore("images\train\indoors\");
    net = trainNetwork(trainCombined,net.layerGraph,options);
end

