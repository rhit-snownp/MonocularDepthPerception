%ALEXNET Transfer Learning Experiment

clc; 
close all; 
clear variables; 

%load in the training datasets
[trainCombined, valCombined] = ReadDIODEforCombined("..\images\train\indoors\");

net = alexnet;
analyzeNetwork(net);

%%

%input layer 
top1 = imageInputLayer([304 228 3],'Name','input'); 

%Reshape layer to get to 227 x 227 x 3
top2 = resize3dLayer('OutputSize',[227 227 3],'Name','resize227');

%Grab most of the layers of alexnet we care about
middle1 = net.Layers(2:end-5);

%Generate a new tail to be a regression layer 
end1 = [
depthToSpace2dLayer([64 64],"Name","depthToSpace","Mode","crd")
resize2dLayer("Name","resize-output-size","GeometricTransformMode","half-pixel","Method","nearest","NearestRoundingMode","round","OutputSize",[76 57])];

%Assemble the new network
lgraph = layerGraph;
lgraph = addLayers(lgraph, top1);
lgraph = addLayers(lgraph, top2);
lgraph = addLayers(lgraph, middle1);
lgraph = addLayers(lgraph, end1);

lgraph = connectLayers(lgraph, 'input', 'resize227');
lgraph = connectLayers(lgraph, 'resize227', 'conv1');
lgraph = connectLayers(lgraph, 'fc7', 'DepthToSpace');

analyzeNetwork(lgraph);


%%
pixelRange = [-30 30];
imageAugmenter = imageDataAugmenter( ...
    'RandXReflection',true, ...
    'RandXTranslation',pixelRange, ...
    'RandYTranslation',pixelRange);
augimdsTrain = augmentedImageDatastore(inputSize(1:2),imdsTrain, ...
    'DataAugmentation',imageAugmenter);
augimdsValidation = augmentedImageDatastore(inputSize(1:2),imdsValidation);
augimdsTest = augmentedImageDatastore(inputSize(1:2),testingDataStore);

options = trainingOptions('sgdm', ...
    'MiniBatchSize',100, ...
    'MaxEpochs', 64, ...
    'InitialLearnRate',1e-5, ...
    'Shuffle','every-epoch', ...
    'ValidationData',augimdsValidation, ...
    'ValidationFrequency',6, ...
    'Verbose',false, ...
    'Plots','training-progress');
netTransfer = trainNetwork(augimdsTrain,layers,options);
[YPred,scores] = classify(netTransfer,augimdsValidation);

idx = randperm(numel(imdsValidation.Files),4);
figure
for i = 1:4
    subplot(2,2,i)
    I = readimage(imdsValidation,idx(i));
    imshow(I)
    label = YPred(idx(i));
    title(string(label));
end

%Get accuracy for each 

%Get training accuracy
[YPredTrain,scores] = classify(netTransfer,augimdsTrain);
Ytrain = imdsTrain.Labels;
trainAccuracy = mean(YPredTrain == Ytrain);

%Get valid accuracy 
[YPredValid,scores] = classify(netTransfer,augimdsValidation);
YValidation = imdsValidation.Labels;
validAccuracy = mean(YPredValid == YValidation);

%Get test accuracy
[YPredTest,scores] = classify(netTransfer,augimdsTest);
YTest = testingDataStore.Labels;
testAccuracy = mean(YPredTest == YTest);


%what am i doing -> 